#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EmployeesVacations.Models.DBObjects
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="employeesandvacations")]
	public partial class EmployeesAndVacationsModelsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBusinessUnit(BusinessUnit instance);
    partial void UpdateBusinessUnit(BusinessUnit instance);
    partial void DeleteBusinessUnit(BusinessUnit instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertTeam(Team instance);
    partial void UpdateTeam(Team instance);
    partial void DeleteTeam(Team instance);
    partial void InsertVacationRequest(VacationRequest instance);
    partial void UpdateVacationRequest(VacationRequest instance);
    partial void DeleteVacationRequest(VacationRequest instance);
    #endregion
		
		public EmployeesAndVacationsModelsDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["employeesandvacationsConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public EmployeesAndVacationsModelsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EmployeesAndVacationsModelsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EmployeesAndVacationsModelsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EmployeesAndVacationsModelsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BusinessUnit> BusinessUnits
		{
			get
			{
				return this.GetTable<BusinessUnit>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Team> Teams
		{
			get
			{
				return this.GetTable<Team>();
			}
		}
		
		public System.Data.Linq.Table<VacationRequest> VacationRequests
		{
			get
			{
				return this.GetTable<VacationRequest>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BusinessUnits")]
	public partial class BusinessUnit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IDBusinessUnit;
		
		private string _Name;
		
		private System.Nullable<System.Guid> _IDBusinessUnitManager;
		
		private EntitySet<Employee> _Employees;
		
		private EntitySet<Team> _Teams;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDBusinessUnitChanging(System.Guid value);
    partial void OnIDBusinessUnitChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIDBusinessUnitManagerChanging(System.Nullable<System.Guid> value);
    partial void OnIDBusinessUnitManagerChanged();
    #endregion
		
		public BusinessUnit()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Teams = new EntitySet<Team>(new Action<Team>(this.attach_Teams), new Action<Team>(this.detach_Teams));
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDBusinessUnit", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IDBusinessUnit
		{
			get
			{
				return this._IDBusinessUnit;
			}
			set
			{
				if ((this._IDBusinessUnit != value))
				{
					this.OnIDBusinessUnitChanging(value);
					this.SendPropertyChanging();
					this._IDBusinessUnit = value;
					this.SendPropertyChanged("IDBusinessUnit");
					this.OnIDBusinessUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDBusinessUnitManager", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IDBusinessUnitManager
		{
			get
			{
				return this._IDBusinessUnitManager;
			}
			set
			{
				if ((this._IDBusinessUnitManager != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDBusinessUnitManagerChanging(value);
					this.SendPropertyChanging();
					this._IDBusinessUnitManager = value;
					this.SendPropertyChanged("IDBusinessUnitManager");
					this.OnIDBusinessUnitManagerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BusinessUnit_Employee", Storage="_Employees", ThisKey="IDBusinessUnit", OtherKey="IDBusinessUnit")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BusinessUnit_Team", Storage="_Teams", ThisKey="IDBusinessUnit", OtherKey="IDBusinessUnit")]
		public EntitySet<Team> Teams
		{
			get
			{
				return this._Teams;
			}
			set
			{
				this._Teams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_BusinessUnit", Storage="_Employee", ThisKey="IDBusinessUnitManager", OtherKey="IDEmployee", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.BusinessUnits.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.BusinessUnits.Add(this);
						this._IDBusinessUnitManager = value.IDEmployee;
					}
					else
					{
						this._IDBusinessUnitManager = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.BusinessUnit = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.BusinessUnit = null;
		}
		
		private void attach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.BusinessUnit = this;
		}
		
		private void detach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.BusinessUnit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employees")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IDEmployee;
		
		private string _FirstName;
		
		private string _LastName;
		
		private int _Position;
		
		private System.Guid _IDTeam;
		
		private System.Guid _IDBusinessUnit;
		
		private System.DateTime _HiringDate;
		
		private int _TotalDaysOff;
		
		private int _DaysOffLeft;
		
		private EntitySet<BusinessUnit> _BusinessUnits;
		
		private EntitySet<Team> _Teams;
		
		private EntitySet<VacationRequest> _VacationRequests;
		
		private EntityRef<BusinessUnit> _BusinessUnit;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDEmployeeChanging(System.Guid value);
    partial void OnIDEmployeeChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    partial void OnIDTeamChanging(System.Guid value);
    partial void OnIDTeamChanged();
    partial void OnIDBusinessUnitChanging(System.Guid value);
    partial void OnIDBusinessUnitChanged();
    partial void OnHiringDateChanging(System.DateTime value);
    partial void OnHiringDateChanged();
    partial void OnTotalDaysOffChanging(int value);
    partial void OnTotalDaysOffChanged();
    partial void OnDaysOffLeftChanging(int value);
    partial void OnDaysOffLeftChanged();
    #endregion
		
		public Employee()
		{
			this._BusinessUnits = new EntitySet<BusinessUnit>(new Action<BusinessUnit>(this.attach_BusinessUnits), new Action<BusinessUnit>(this.detach_BusinessUnits));
			this._Teams = new EntitySet<Team>(new Action<Team>(this.attach_Teams), new Action<Team>(this.detach_Teams));
			this._VacationRequests = new EntitySet<VacationRequest>(new Action<VacationRequest>(this.attach_VacationRequests), new Action<VacationRequest>(this.detach_VacationRequests));
			this._BusinessUnit = default(EntityRef<BusinessUnit>);
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDEmployee", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IDEmployee
		{
			get
			{
				return this._IDEmployee;
			}
			set
			{
				if ((this._IDEmployee != value))
				{
					this.OnIDEmployeeChanging(value);
					this.SendPropertyChanging();
					this._IDEmployee = value;
					this.SendPropertyChanged("IDEmployee");
					this.OnIDEmployeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDTeam", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDTeam
		{
			get
			{
				return this._IDTeam;
			}
			set
			{
				if ((this._IDTeam != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDTeamChanging(value);
					this.SendPropertyChanging();
					this._IDTeam = value;
					this.SendPropertyChanged("IDTeam");
					this.OnIDTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDBusinessUnit", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDBusinessUnit
		{
			get
			{
				return this._IDBusinessUnit;
			}
			set
			{
				if ((this._IDBusinessUnit != value))
				{
					if (this._BusinessUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDBusinessUnitChanging(value);
					this.SendPropertyChanging();
					this._IDBusinessUnit = value;
					this.SendPropertyChanged("IDBusinessUnit");
					this.OnIDBusinessUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HiringDate", DbType="DateTime NOT NULL")]
		public System.DateTime HiringDate
		{
			get
			{
				return this._HiringDate;
			}
			set
			{
				if ((this._HiringDate != value))
				{
					this.OnHiringDateChanging(value);
					this.SendPropertyChanging();
					this._HiringDate = value;
					this.SendPropertyChanged("HiringDate");
					this.OnHiringDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalDaysOff", DbType="Int NOT NULL")]
		public int TotalDaysOff
		{
			get
			{
				return this._TotalDaysOff;
			}
			set
			{
				if ((this._TotalDaysOff != value))
				{
					this.OnTotalDaysOffChanging(value);
					this.SendPropertyChanging();
					this._TotalDaysOff = value;
					this.SendPropertyChanged("TotalDaysOff");
					this.OnTotalDaysOffChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DaysOffLeft", DbType="Int NOT NULL")]
		public int DaysOffLeft
		{
			get
			{
				return this._DaysOffLeft;
			}
			set
			{
				if ((this._DaysOffLeft != value))
				{
					this.OnDaysOffLeftChanging(value);
					this.SendPropertyChanging();
					this._DaysOffLeft = value;
					this.SendPropertyChanged("DaysOffLeft");
					this.OnDaysOffLeftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_BusinessUnit", Storage="_BusinessUnits", ThisKey="IDEmployee", OtherKey="IDBusinessUnitManager")]
		public EntitySet<BusinessUnit> BusinessUnits
		{
			get
			{
				return this._BusinessUnits;
			}
			set
			{
				this._BusinessUnits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Team", Storage="_Teams", ThisKey="IDEmployee", OtherKey="IDTeamLead")]
		public EntitySet<Team> Teams
		{
			get
			{
				return this._Teams;
			}
			set
			{
				this._Teams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_VacationRequest", Storage="_VacationRequests", ThisKey="IDEmployee", OtherKey="IDEmployee")]
		public EntitySet<VacationRequest> VacationRequests
		{
			get
			{
				return this._VacationRequests;
			}
			set
			{
				this._VacationRequests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BusinessUnit_Employee", Storage="_BusinessUnit", ThisKey="IDBusinessUnit", OtherKey="IDBusinessUnit", IsForeignKey=true)]
		public BusinessUnit BusinessUnit
		{
			get
			{
				return this._BusinessUnit.Entity;
			}
			set
			{
				BusinessUnit previousValue = this._BusinessUnit.Entity;
				if (((previousValue != value) 
							|| (this._BusinessUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BusinessUnit.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._BusinessUnit.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._IDBusinessUnit = value.IDBusinessUnit;
					}
					else
					{
						this._IDBusinessUnit = default(System.Guid);
					}
					this.SendPropertyChanged("BusinessUnit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Employee", Storage="_Team", ThisKey="IDTeam", OtherKey="IDTeam", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._IDTeam = value.IDTeam;
					}
					else
					{
						this._IDTeam = default(System.Guid);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BusinessUnits(BusinessUnit entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_BusinessUnits(BusinessUnit entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_VacationRequests(VacationRequest entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_VacationRequests(VacationRequest entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teams")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IDTeam;
		
		private System.Guid _IDBusinessUnit;
		
		private string _Name;
		
		private System.Nullable<System.Guid> _IDTeamLead;
		
		private EntitySet<Employee> _Employees;
		
		private EntityRef<BusinessUnit> _BusinessUnit;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDTeamChanging(System.Guid value);
    partial void OnIDTeamChanged();
    partial void OnIDBusinessUnitChanging(System.Guid value);
    partial void OnIDBusinessUnitChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIDTeamLeadChanging(System.Nullable<System.Guid> value);
    partial void OnIDTeamLeadChanged();
    #endregion
		
		public Team()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._BusinessUnit = default(EntityRef<BusinessUnit>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDTeam", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IDTeam
		{
			get
			{
				return this._IDTeam;
			}
			set
			{
				if ((this._IDTeam != value))
				{
					this.OnIDTeamChanging(value);
					this.SendPropertyChanging();
					this._IDTeam = value;
					this.SendPropertyChanged("IDTeam");
					this.OnIDTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDBusinessUnit", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDBusinessUnit
		{
			get
			{
				return this._IDBusinessUnit;
			}
			set
			{
				if ((this._IDBusinessUnit != value))
				{
					if (this._BusinessUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDBusinessUnitChanging(value);
					this.SendPropertyChanging();
					this._IDBusinessUnit = value;
					this.SendPropertyChanged("IDBusinessUnit");
					this.OnIDBusinessUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDTeamLead", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> IDTeamLead
		{
			get
			{
				return this._IDTeamLead;
			}
			set
			{
				if ((this._IDTeamLead != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDTeamLeadChanging(value);
					this.SendPropertyChanging();
					this._IDTeamLead = value;
					this.SendPropertyChanged("IDTeamLead");
					this.OnIDTeamLeadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Employee", Storage="_Employees", ThisKey="IDTeam", OtherKey="IDTeam")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BusinessUnit_Team", Storage="_BusinessUnit", ThisKey="IDBusinessUnit", OtherKey="IDBusinessUnit", IsForeignKey=true)]
		public BusinessUnit BusinessUnit
		{
			get
			{
				return this._BusinessUnit.Entity;
			}
			set
			{
				BusinessUnit previousValue = this._BusinessUnit.Entity;
				if (((previousValue != value) 
							|| (this._BusinessUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BusinessUnit.Entity = null;
						previousValue.Teams.Remove(this);
					}
					this._BusinessUnit.Entity = value;
					if ((value != null))
					{
						value.Teams.Add(this);
						this._IDBusinessUnit = value.IDBusinessUnit;
					}
					else
					{
						this._IDBusinessUnit = default(System.Guid);
					}
					this.SendPropertyChanged("BusinessUnit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Team", Storage="_Employee", ThisKey="IDTeamLead", OtherKey="IDEmployee", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Teams.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Teams.Add(this);
						this._IDTeamLead = value.IDEmployee;
					}
					else
					{
						this._IDTeamLead = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VacationRequests")]
	public partial class VacationRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IDVacationRequest;
		
		private System.Guid _IDEmployee;
		
		private string _Reason;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private int _DaysRequested;
		
		private int _FirstApproval;
		
		private int _SecondApproval;
		
		private int _Status;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDVacationRequestChanging(System.Guid value);
    partial void OnIDVacationRequestChanged();
    partial void OnIDEmployeeChanging(System.Guid value);
    partial void OnIDEmployeeChanged();
    partial void OnReasonChanging(string value);
    partial void OnReasonChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnDaysRequestedChanging(int value);
    partial void OnDaysRequestedChanged();
    partial void OnFirstApprovalChanging(int value);
    partial void OnFirstApprovalChanged();
    partial void OnSecondApprovalChanging(int value);
    partial void OnSecondApprovalChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    #endregion
		
		public VacationRequest()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDVacationRequest", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IDVacationRequest
		{
			get
			{
				return this._IDVacationRequest;
			}
			set
			{
				if ((this._IDVacationRequest != value))
				{
					this.OnIDVacationRequestChanging(value);
					this.SendPropertyChanging();
					this._IDVacationRequest = value;
					this.SendPropertyChanged("IDVacationRequest");
					this.OnIDVacationRequestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDEmployee", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IDEmployee
		{
			get
			{
				return this._IDEmployee;
			}
			set
			{
				if ((this._IDEmployee != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDEmployeeChanging(value);
					this.SendPropertyChanging();
					this._IDEmployee = value;
					this.SendPropertyChanged("IDEmployee");
					this.OnIDEmployeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reason", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Reason
		{
			get
			{
				return this._Reason;
			}
			set
			{
				if ((this._Reason != value))
				{
					this.OnReasonChanging(value);
					this.SendPropertyChanging();
					this._Reason = value;
					this.SendPropertyChanged("Reason");
					this.OnReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DaysRequested", DbType="Int NOT NULL")]
		public int DaysRequested
		{
			get
			{
				return this._DaysRequested;
			}
			set
			{
				if ((this._DaysRequested != value))
				{
					this.OnDaysRequestedChanging(value);
					this.SendPropertyChanging();
					this._DaysRequested = value;
					this.SendPropertyChanged("DaysRequested");
					this.OnDaysRequestedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstApproval", DbType="Int NOT NULL")]
		public int FirstApproval
		{
			get
			{
				return this._FirstApproval;
			}
			set
			{
				if ((this._FirstApproval != value))
				{
					this.OnFirstApprovalChanging(value);
					this.SendPropertyChanging();
					this._FirstApproval = value;
					this.SendPropertyChanged("FirstApproval");
					this.OnFirstApprovalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondApproval", DbType="Int NOT NULL")]
		public int SecondApproval
		{
			get
			{
				return this._SecondApproval;
			}
			set
			{
				if ((this._SecondApproval != value))
				{
					this.OnSecondApprovalChanging(value);
					this.SendPropertyChanging();
					this._SecondApproval = value;
					this.SendPropertyChanged("SecondApproval");
					this.OnSecondApprovalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_VacationRequest", Storage="_Employee", ThisKey="IDEmployee", OtherKey="IDEmployee", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.VacationRequests.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.VacationRequests.Add(this);
						this._IDEmployee = value.IDEmployee;
					}
					else
					{
						this._IDEmployee = default(System.Guid);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
